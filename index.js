const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const mysql = require('mysql2');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = ''; // —Ç–æ–∫–µ–Ω

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
const pool = mysql.createPool({
    host: 'localhost', // —Ö–æ—Å—Ç –±–¥
    user: 'root', // —é–∑–µ—Ä –±–¥
    password: '', // –ø–∞—Ä–æ–ª—å –æ—Ç –±–¥
    database: 'emailt', // —Å–∞–º–∞ –±–¥
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
}).promise();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id BIGINT NOT NULL UNIQUE,
                is_vip BOOLEAN DEFAULT FALSE,
                temp_email VARCHAR(255),
                account_id VARCHAR(255),
                last_checked TIMESTAMP NULL DEFAULT NULL
            )
        `);

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —á–µ—Ä–µ–∑ mail.gw
async function createTempEmail() {
    try {
        const domainsResponse = await axios.get('https://api.mail.gw/domains');
        const domains = domainsResponse.data['hydra:member'];

        if (!domains || domains.length === 0) {
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤.');
        }

        const domain = domains[0].domain;
        const email = `${Math.random().toString(36).substring(2, 10)}@${domain}`;

        const registerResponse = await axios.post('https://api.mail.gw/accounts', {
            address: email,
            password: 'password'
        });

        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç—ã:', registerResponse.data);

        const tokenResponse = await axios.post('https://api.mail.gw/token', {
            address: email,
            password: 'password'
        });

        return {
            email,
            token: tokenResponse.data.token,
            accountId: registerResponse.data.id // –°–æ—Ö—Ä–∞–Ω—è–µ–º accountId
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:', error.response ? error.response.data : error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ mail.gw
async function checkEmails(token) {
    try {
        const response = await axios.get('https://api.mail.gw/messages', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        return response.data['hydra:member'] || [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Å–µ–º:', error.response ? error.response.data : error.message);
        return [];
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const [user] = await pool.query('SELECT * FROM users WHERE chat_id = ?', [chatId]);

    if (user.length === 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await pool.query('INSERT INTO users (chat_id, is_vip) VALUES (?, ?)', [chatId, false]);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì® –í—ã–¥–∞—Ç—å –ø–æ—á—Ç—É', callback_data: 'create_email' }]
            ]
        }
    };

    bot.sendMessage(
        chatId,
        `üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –Ø ‚Äî –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n\n`,
        options
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vip @username
bot.onText(/\/vip (@\w+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const username = match[1].replace('@', ''); // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const [user] = await pool.query('SELECT * FROM users WHERE chat_id = ?', [chatId]);

    if (user.length === 0) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ VIP
    await pool.query('UPDATE users SET is_vip = TRUE WHERE chat_id = ?', [chatId]);

    bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —Ç–µ–ø–µ—Ä—å VIP!`);
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;

    if (query.data === 'create_email') {
        const [user] = await pool.query('SELECT * FROM users WHERE chat_id = ?', [chatId]);
        //  –≤–∏–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (!user[0].is_vip) {
            bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å–∞. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å VIP.');
            return;
        }

        // —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç—É
        const tempEmail = await createTempEmail();

        if (tempEmail) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await pool.query(
                'UPDATE users SET temp_email = ?, last_checked = ?, account_id = ? WHERE chat_id = ?',
                [tempEmail.email, new Date(), tempEmail.accountId, chatId]
            );

            bot.sendMessage(
                chatId,
                `üì® –í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: \n\n` +
                `üîê ${tempEmail.email}\n\n` +
                '–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞. üì©'
            );

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏—Å–µ–º
            startEmailChecker(chatId, tempEmail.token);
        } else {
            bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
        }
    }
});

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å–µ–º
function startEmailChecker(chatId, token) {
    const interval = setInterval(async () => {
        const [user] = await pool.query('SELECT * FROM users WHERE chat_id = ?', [chatId]);
        if (!user[0].temp_email) {
            clearInterval(interval);
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 –º–∏–Ω—É—Ç
        if (new Date() - user[0].last_checked > 30 * 60 * 1000) {
            clearInterval(interval);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await pool.query(
                'UPDATE users SET temp_email = NULL, account_id = NULL WHERE chat_id = ?',
                [chatId]
            );

            bot.sendMessage(
                chatId,
                '‚åõ –ü–æ—á—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É.'
            );

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–¥–∞—Ç—å –ø–æ—á—Ç—É" —Å–Ω–æ–≤–∞
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì® –í—ã–¥–∞—Ç—å –ø–æ—á—Ç—É', callback_data: 'create_email' }]
                    ]
                }
            };
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', options);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
        const emails = await checkEmails(token);
        console.log('–ù–∞–π–¥–µ–Ω—ã –ø–∏—Å—å–º–∞:', emails);

        if (emails && emails.length > 0) {
            for (const email of emails) {
                const [sentEmail] = await pool.query(
                    'SELECT * FROM sent_emails WHERE chat_id = ? AND email_id = ?',
                    [chatId, email.id]
                );

                if (sentEmail.length === 0) {
                    console.log('–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ:', email.id);
                    const messageResponse = await axios.get(`https://api.mail.gw/messages/${email.id}`, {
                        headers: {
                            Authorization: `Bearer ${token}`
                        }
                    });
                    const message = messageResponse.data;
                    console.log('–î–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞:', message);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot.sendMessage(
                        chatId,
                        `üì© **–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ!**\n\n` +
                        `üë§ –û—Ç: ${message.from.name} <${message.from.address}>\n` +
                        `üìå –¢–µ–º–∞: ${message.subject}\n` +
                        `üìù –¢–µ–∫—Å—Ç: \n\n${message.text || message.html}`
                    );

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    await pool.query(
                        'INSERT INTO sent_emails (chat_id, email_id, from_email, to_email, message_text) VALUES (?, ?, ?, ?, ?)',
                        [chatId, email.id, message.from.address, user[0].temp_email, message.text || message.html]
                    );
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await pool.query(
            'UPDATE users SET last_checked = ? WHERE chat_id = ?',
            [new Date(), chatId]
        );
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
initializeDatabase().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.');
});